참고 - https://nomadcoders.co/react-native-for-beginners/lectures/3137



모든 요소들은 header에서부터 시작된다. 현재 우리 프로젝트에는 두개의 TouchableOpacity component가 있다. TouchableOpacity는 단순히 애니메이션과 이벤트가 있는 View다. 예를 들어 onPress, onPressIn, onPressOut, onLongPress 이벤트가 있다. onPress는 onPressIn과 onPressOut을 합쳐 놓은 것이다. 누군가 Work라는 글자를(TouchableOpacity) 눌렀을 때 우리는 working state를 true로 설정했다. 반대로 Travel을 눌렀을 때는 working을 false로 설정했다. 이 모드는 TextInput이 어떻게 디스플레이 될지 바꿔줘야 하기 때문에 중요한다.(placeholder) 물론 working state의 boolean 값에 따라 버튼 스타일에도 변화를 줄 것이다.

TextInput의 Props로 기존에 익숙한 style, placeholder, value 외에도 react native에서 적용 가능한 onSubmitEditing, onChangeText, returnKeyType props를 주었다. returnKeyType은 키패드의 return 버튼의 문구를 바꾸어 준다. onChangeText는 text가 바뀔 때 실행되는 함수이거 onSubmitEditing은 사용자가 done 버튼을 눌렀을 때 실행되는 함수이다.

우리가 만든 onChangeText 함수가 하는 일은 text를 받아서 state에 text를 담는 일을 한다.

addToDo 함수는 만약 toDos가 empty면 아무것도 하지 않도록 잘못된 동작을 방지해준다. toDos에 text가 있으면 우리가 할 일은 새로운 object를 만든 건데 기존에 toDos에 담겨 있던 content와 state에 새롭게 추가된 요소들을 결합해서 만들어 줄 것이다.(ES6 spread 문법) object의 id(key)로는 Date.now()가 되고 값은 text state와 working state을 가진다. 다시 말해서 addToDo에서 기존 toDos에 newToDo를 합쳐서 새로운 object를 만들 것이다. 이러한 방식으로 진행하는 이유는 key를 통해서 toDos를 찾아야하기 때문이다. 우리의 key의 object형태로 데이터베이스처럼 생겼는데 이건 hashmap이라고 불린다. addToDo를 실행할 때 우리는 기존 toDos와 새로운 toDos를 합쳐 새로운 object를 만든다. 그리고 나서 찹쳐진 toDos를 state에 저장하고 saveToDos 함수를 호출하는 것이다. 그리고 toDo에 value를 empty로 설정하는 것이다.

saveToDos에서는 AsyncStorage를 사용하고 있는데 웹에서 사용하는 local storage와 같은 것이다. 대신 모바일을 위한 암호화되지 않은 string만 담을 수 있는 storage이다. 그래서 비밀번호 같은 건 저장하지 않을 것이다. 대신에 toDo같이 딱히 중요하지 않는 정보를 저장할 것이다. api는 local storage와 굉장히 비슷하다. setItem, key 그리고 string으로 굉장히 이해하기 쉽게 되어 있다. 차이점은 에러가 날 수 있기 때문에 await를 사용한다는 것이다. 우리가 await으로 호출해 낸 건 promise이다. 왜냐하면 우리가 휴대폰 디스크에 접근하고 있어서 휴대폰의 용량이 꽉차거나 했을 때 에러가 발생할 수도 있기 때문이다. 그래서 반드시 에러가 있는 지 확인해줘야 한다. 우리는 string만 저장하고 있는데 그 말은 즉 우리가 string만 받을 것이기 때문에 우리가 saveToDos에서 toDo를 받을 때 object였던 것을 string으로 변환해줘야 한다는 뜻이다. 여기서 await을 사용하는 이유는 그것들이 저장될 때까지 기다리기 위함인데 그러고 싶지 않으면 생략해도 된다. 그래도 await을 사용하는 편이 좋다. 에러가 발생하는 지 확인하고 에러 메세지를 띄울 수 있기 때문이다. 여기까지가 addToDo였고 사용자가 여기에 toDo를 입력하면 진행되는 부분이다. 그러고 나면 TextInput 다음 부분으로 건너가게 된다.

ScrollView component를 만들었는데 이제는 이게 스크롤을 가능하게 해주는 component라는 것을 잘 알고 있다. ScrollView에서는 우리가 만든 state의 특이한 구조 때문에 toDos.map()을 할 수가 없다.(object는 map을 사용할 수 없기 때문) 대신에 우리는 Object.keys()를 사용할 수 있는데 key값들만 담긴 배열을 반환하는 것이다.(key === Date.now()) 각각의 key마다 우리는 toDos object에 접근해서 그 안의 key 값에 접근해서 toDo의 working 값이 state의 working 값과 동일하지 보는 것이다. 왜냐하면 state의 working의 값이 Work, Travel 버튼을 눌렀을 때 바뀌는 값이기 때문이다. working의 값이 true(Work), false(Travel)이냐의 따라 Work항목과 Travel 항목에서 보여지는 todo들이 달라진다.

그 다음 todo항목에서 우리가 해준 것은 TouchableOpacity component인데 toDos 항목을 지우는 쓰레기통 아이콘 버튼이다. 다시 설명하자면 TouchableOpacity에는 onPress라는 function이 있는데 toDo를 delete하고 key를 보내주는 function이다. 이 부분을 클릭하면 deleteToDo() function으로 이동해서 실행하게 된다. deleteToDo function은 React Native에서 지원하는 Alert API를 사용해서 사용자에게 alert을 보낼 수 있게 해주는데 우리 마음대로 Title과 Subtitle을 정할 수 있고 button의 style과 이름도 바꿀 수 있고 callback도 정해줄 수 있다. callback은 누군가 버튼을 눌렀을 때 일어나는 동작인데 기본적으로 callback을 정해주지 않으면 아무것도 일어나지 않는다. 말했듯이 style은 iOS에서만 지정할 수 있다. 예를 들어 style 값으로 cancel을 주면 글씨가 약간 두꺼줘진다? 우리 프로젝트의 Alert API에 text: "I'm Sure"에서 onPress function는 다시 반복하는 동작을 한다. 모든 기존의 toDos 값을 가지고 새로운 object를 만들고 object의 key들을 지우는 것이다. 새로운 newToDos object가 생성되면 state에 전달해서 UI를 업데이트하고 local storage에도 저장할 것이다.

어플리케이션이 재시작되면 useEffect()를 통해 loadToDos() 함수를 호출하고 loadToDos()에서는 AsyncStorage를 이용해서 @toDos를 받아오고 있는데 그렇게 받아온 toDo들은 parse해서 object를 만들고 있다. 알다시피 JSON.stringigy()는 자바스크립트 object를 받아 string으로 만들어주고 JSON.parse()는 string을 받아서 자바스크립트 object로 바꿔준다. 여기서 우리는 휴대폰 디스크에 있던 string을 받아서 자바스크립트 object로 바꿔주고 그 object를 state에 전달해준다. 물론 그렇게 되면 rerender가 이루어지고 UI가 업데이트된다.


다음 강의에서는 짧은 코드 챌린지를 해볼 것이다.